name: Deploy Rules

on: # yamllint disable-line rule:truthy
  workflow_dispatch:
  push: # remove when not testing
    branches:
      - master


env:
  CONFIG_FILE: deployment-config.yaml

jobs:
  initialize:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Azure CLI
        uses: azure/cli@v2
        with:
          inlineScript: |
            echo "Azure CLI setup complete." 

      - name: Checkout mdr_root repository
        uses: actions/checkout@v5  
        with:
          repository: bittib010/mdr_root
          token: ${{ secrets.PAT_TOKEN }}
          path: mdr_root


      # Checkout current repository
      - name: Checkout repository
        uses: actions/checkout@v5
        with: 
          path: mdr_cust

      # Authenticate to Azure using the customer service principal JSON stored in AZURE_CREDENTIALS
      - name: Azure login (customer tenant)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


      - name: Install PowerShell Modules
        id: install-modules
        shell: pwsh
        run: |
          $InformationPreference = 'Continue'
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          try {
            $modulesToInstall = @(
              'powershell-yaml'
            )
            $modulesToInstall | ForEach-Object {
              if (-not (Get-Module -Name $_ -ListAvailable)) {
                Write-Information -MessageData "Module [$_] not found, installing it..."
                Install-Module -Name $_ -ErrorAction Stop
              }
            }
          } catch {
            Write-Error -Message "Failed to install module [$_]."
            exit 1
          }

      # Loop the /mdr_root folders subfolder: artefacts recursively
      - name: Add base content to artefacts
        shell: pwsh
        run: |
          $csvPath = "${{ github.workspace }}/content.csv"
          # Write CSV header if the file doesn't exist
          if (-not (Test-Path $csvPath)) {
          "Path,ID" | Out-File -FilePath $csvPath
            }
            
            Get-ChildItem "${{ github.workspace }}/mdr_root" -Recurse -Filter *.yaml | ForEach-Object {
          Write-Host "Found artefacts file: $($_.FullName)"
          $path = $_.FullName
          $path = $path -replace [regex]::Escape("${{ github.workspace }}/mdr_root/"), ""
          $path = $path -replace '\\', '/'

          # Read YAML file and extract the "id" field
          try {
            $yamlContent = Get-Content -Raw -Path $_.FullName
            $yamlObject = ConvertFrom-Yaml $yamlContent
            $id = $yamlObject.id
          }
          catch {
            Write-Host "Failed to parse YAML from $($_.FullName)"
            $id = ""
          }

          Write-Host "Saving path: $path with ID: $id"
          "$path,$id" | Out-File -Append -FilePath $csvPath
            }

      - name: Add, exclude and override content
        shell: pwsh
        run: |
          $csvPath = "${{ github.workspace }}/content.csv"
          
          # Ensure CSV file exists with header
          if (-not (Test-Path $csvPath)) {
              "Path,ID" | Out-File -FilePath $csvPath
          }
          
          # Import existing CSV content (ignoring header issues)
          $csvContent = @{
          }
          if (Test-Path $csvPath) {
              $lines = Get-Content -Path $csvPath | Select-Object -Skip 1
              foreach ($line in $lines) {
                  if ($line -match "^(.*?),(.*)$") {
                      $csvContent[$matches[2]] = $matches[1]
                  }
              }
          }
          
          # Process every YAML file in mdr_cust folder
          $files = Get-ChildItem "${{ github.workspace }}/mdr_cust/artifacts" -Recurse -Include *.yaml,*.yml

          foreach ($file in $files) {
              $relativePath = $file.FullName -replace [regex]::Escape("${{ github.workspace }}/mdr_cust/"), ""
              $relativePath = $relativePath -replace '\\', '/'
              Write-Host "Processing file: $($file.FullName) with relative path: $relativePath"
              
              try {
                  $yamlContent = Get-Content -Raw -Path $file.FullName
                  $yamlObj = $yamlContent | ConvertFrom-Yaml
                  $id = $yamlObj.id
              }
              catch {
                  Write-Host "Failed to parse YAML from $($file.FullName)"
                  $id = ""
              }
              
              if ($id -and $id.Trim() -ne "") {
                  # If file id already exists, update its path; otherwise, add new entry
                  $csvContent[$id] = $relativePath
              }
              else {
                  Write-Host "Skipping file $($file.FullName) due to invalid or empty id"
              }
          }
          
          # Update CSV content file by rewriting it with header and new content
          $csvLines = @("Path,ID")
          foreach ($key in $csvContent.Keys) {
              $csvLines += "$(
                $csvContent[$key]
              ),$key"
          }
          
          # Process ExcludeRules from deployment-config.yaml
          $configPath = "${{ github.workspace }}/mdr_cust/deployment-config.yaml"
          if (Test-Path $configPath) {
              try {
                  $configContent = Get-Content -Raw -Path $configPath
                  $config = $configContent | ConvertFrom-Yaml
                  if ($config.ExcludeRules) {
                      foreach ($rule in $config.ExcludeRules) {
                          if ($rule.id -and $csvContent.ContainsKey($rule.id)) {
                              $csvContent.Remove($rule.id)
                          }
                      }
                      # Rebuild CSV content after exclusion
                      $csvLines = @("Path,ID")
                      foreach ($key in $csvContent.Keys) {
                          $csvLines += "$(
                            $csvContent[$key]
                          ),$key"
                      }
                  }
              }
              catch {
                  Write-Host "Failed to parse deployment-config.yaml"
              }
          }
          
          $csvLines | Out-File -FilePath $csvPath -Encoding utf8

      # Deploy selected rules to the customer's Sentinel workspace
      - name: Deploy Sentinel rules
        shell: pwsh
        env:
          AZURE_RG: ${{ vars.AZURE_RG }}
          AZURE_WORKSPACE: ${{ vars.AZURE_WORKSPACE }}
        run: |
          if (-not $env:AZURE_RG -or -not $env:AZURE_WORKSPACE) {
            Write-Host "Repository Variables AZURE_RG and AZURE_WORKSPACE are not set. Skipping deployment."
            exit 0
          }

          az extension add -n sentinel --yes

          $csvPath = "${{ github.workspace }}/content.csv"
          if (-not (Test-Path $csvPath)) { Write-Error "content.csv not found"; exit 1 }

          $lines = Get-Content -Path $csvPath | Select-Object -Skip 1
          foreach ($line in $lines) {
            if ($line -match "^(.*?),(.*)$") {
              $relPath = $matches[1]
              $ruleId = $matches[2]

              $custPath = Join-Path "${{ github.workspace }}/mdr_cust" $relPath
              $basePath = Join-Path "${{ github.workspace }}/mdr_root" $relPath
              $fullPath = $null
              if (Test-Path $custPath) { $fullPath = $custPath } elseif (Test-Path $basePath) { $fullPath = $basePath }
              if (-not $fullPath) { Write-Host "Skipping missing file: $relPath"; continue }

              try { $yaml = Get-Content -Raw -Path $fullPath | ConvertFrom-Yaml } catch { Write-Host "YAML parse failed: $fullPath"; continue }

              $kind = $yaml.kind
              if (-not $kind) { Write-Host "Skipping non-alert rule (no kind): $ruleId"; continue }
              if ($kind -notin @('Scheduled','NRT')) { Write-Host "Skipping unsupported kind '$kind' for: $ruleId"; continue }

              $name = if ($yaml.displayName) { $yaml.displayName } else { $yaml.name }
              $severity = if ($yaml.severity) { $yaml.severity } else { 'Informational' }
              $query = $yaml.query
              if (-not $query) { Write-Host "No query found for: $ruleId"; continue }

              # Escape quotes to avoid CLI parsing issues
              $queryEscaped = $query -replace '"', '\"'

              Write-Host "Upserting $kind rule: $ruleId ($name)"
              az sentinel alert-rule create `
                --resource-group $env:AZURE_RG `
                --workspace-name $env:AZURE_WORKSPACE `
                --rule-id $ruleId `
                --kind $kind `
                --display-name "$name" `
                --severity $severity `
                --query "$queryEscaped" `
                --enabled true
            }
          }
